/*
    Jing Wei, the rebirth of the chess engine I started in 2010
    Copyright(C) 2019-2024 Chris Florin

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#include <cassert>
#include <cstdint>

#include "../../game/math/bitreset.h"
#include "../../game/math/bitscan.h"

#include "../../game/types/bitboard.h"
#include "../types/direction.h"
#include "../types/piecetype.h"
#include "../types/square.h"

#include "moves.h"

template <PieceType pieceType>
constexpr Bitboard SlidingAttacks(Square src, Bitboard allPieces)
{
    constexpr std::int32_t fileMultiplier[PieceType::PIECETYPE_COUNT][4] = {
        {}, {}, {},
        {
            -1, 1, -1, 1
        },
        {
            -1, 0, 1, 0
        }
    };

    constexpr std::int32_t rankMultiplier[PieceType::PIECETYPE_COUNT][4] = {
        {}, {}, {},
        {
            -1, -1, 1, 1
        },
        {
            0, -1, 0, 1
        }
    };

    Bitboard attacks = EmptyBitboard;

    for (const std::int32_t i : { 0, 1, 2, 3 }) {
        const std::int32_t file = fileMultiplier[pieceType][i];
        const std::int32_t rank = rankMultiplier[pieceType][i];

        std::int32_t j = 1;
        while (IsOnBoard(src, Direction::UP * file * j, Direction::LEFT * rank * j)) {
            const Square dst = src + Direction::UP * file * j + Direction::LEFT * rank * j;

            attacks |= dst;

            if ((allPieces & dst) != EmptyBitboard) {
                break;
            }

            j++;
        }
    }

    return attacks;
}

constexpr std::uint64_t Magics[PieceType::PIECETYPE_COUNT][Square::SQUARE_COUNT] = {
    {}, {}, {},
    {
        0x0030204084015040, 0x0082481801004202, 0x8090240040400a0c, 0x001c040890409000, 0x40908820a000c040, 0x4220880440000000, 0x004382088240c401, 0x01d0802801046000,
        0x80060521020c0101, 0x80060521020c0101, 0x05840404148205a0, 0x5090480a00200244, 0x0086945040000488, 0x406c010108c00100, 0x0824064544104005, 0x2880150100900461,
        0x20044060440c1840, 0x1102412004010200, 0x1010049a04004028, 0x04108408020a4010, 0x0840801404a00190, 0x8502004101108210, 0x8002044041042003, 0x0214422031041001,
        0x8010400004880200, 0x20042000a4014c02, 0x2019040220880410, 0x0404080008220040, 0x0081001281004000, 0x021010800408840e, 0x0824004a04110448, 0xb041002001040100,
        0x0230058404109000, 0x1079480288201400, 0x0242a18800102020, 0x8402080800020a00, 0x02a0008480a40020, 0x08d0100040802404, 0x0104010400204409, 0x080401e180020480,
        0x0001101105009000, 0x0040482210140800, 0x00020100c8008910, 0x0004402018000100, 0x01700c0302140400, 0x00c0100400200040, 0x0002140104040a21, 0x00d0010110210101,
        0x004382088240c401, 0x0640820801040000, 0x880c083a01100040, 0x0040000042022008, 0x201082d122021003, 0x4281102111210002, 0x80180b3000c0a082, 0x0082481801004202,
        0x01d0802801046000, 0x2880150100900461, 0x0023030a0a0a0900, 0x0603210001040904, 0x00e044003106060c, 0x0000200508500440, 0x80060521020c0101, 0x0030204084015040
    },
    {
        0x0880008010204000, 0x0140002000409000, 0x08801000a0028118, 0x7080080004821000, 0x0100021008000500, 0x0b00010024000228, 0x0880210012000080, 0x8200004b02208402,
        0x4002800080400020, 0x8849400020005000, 0x4406004210802200, 0x3820040100820040, 0x0121000800110004, 0x0288808002000400, 0x0001000200010004, 0x020200004c220881,
        0x0804208000400c88, 0x8040108020008042, 0x4020088010048020, 0x0002090023001000, 0x0048004004020041, 0x0288808002000400, 0x0000040008011002, 0x04000a00005100a4,
        0x4008800080284000, 0x0080200040100048, 0x0000200480100081, 0x0403002300081001, 0x0102001200082004, 0x1000040080800200, 0xc010880400100182, 0x0060942600018051,
        0x10c0008042800428, 0x0001008021004000, 0x08900800a0a00400, 0x0002090023001000, 0x0084040801001100, 0x0002008802004450, 0x04800811c4001002, 0x212000410200088c,
        0x0280002000404008, 0x0418200050044000, 0x0118200010008080, 0x0c00080010008080, 0x0121000800110004, 0x1009000400030008, 0x0001000200010004, 0x000a040088420009,
        0x0484410024920200, 0x0484410024920200, 0xd01000a004080220, 0x0000100020090100, 0x0084040801001100, 0x0212040080020080, 0x0003123021081400, 0x0002800100004080,
        0x0000204080041501, 0x0000120100208042, 0x0000204010800a02, 0x2550042009001001, 0x2056000820100402, 0x4222000408011002, 0x80aa101082114804, 0x10000a2109418402
    }
};

struct Magic {
    const Bitboard magic;
    const Bitboard mask;
    const std::uint32_t shift;
    const std::uint32_t attacks;

    constexpr std::uint32_t index(Bitboard occupied) const {
#ifdef __BMI2__
        return static_cast<std::uint32_t>(Pext(occupied, mask));
#else
        return static_cast<std::uint32_t>(((occupied & mask) * magic) >> shift);
#endif
    }
};

std::array<Magic, Square::SQUARE_COUNT> BishopMagicList = { {
    { 0x0030204084015040, 0x0040201008040200, 58,    0 },
    { 0x0082481801004202, 0x0000402010080400, 59,   64 },
    { 0x8090240040400a0c, 0x0000004020100a00, 59,   96 },
    { 0x001c040890409000, 0x0000000040221400, 59,  128 },
    { 0x40908820a000c040, 0x0000000002442800, 59,  160 },
    { 0x4220880440000000, 0x0000000204085000, 59,  192 },
    { 0x004382088240c401, 0x0000020408102000, 59,  224 },
    { 0x01d0802801046000, 0x0002040810204000, 58,  256 },
    { 0x80060521020c0101, 0x0020100804020000, 59,  320 },
    { 0x80060521020c0101, 0x0040201008040000, 59,  352 },
    { 0x05840404148205a0, 0x00004020100a0000, 59,  384 },
    { 0x5090480a00200244, 0x0000004022140000, 59,  416 },
    { 0x0086945040000488, 0x0000000244280000, 59,  448 },
    { 0x406c010108c00100, 0x0000020408500000, 59,  480 },
    { 0x0824064544104005, 0x0002040810200000, 59,  512 },
    { 0x2880150100900461, 0x0004081020400000, 59,  544 },
    { 0x20044060440c1840, 0x0010080402000200, 59,  576 },
    { 0x1102412004010200, 0x0020100804000400, 59,  608 },
    { 0x1010049a04004028, 0x004020100a000a00, 57,  640 },
    { 0x04108408020a4010, 0x0000402214001400, 57,  768 },
    { 0x0840801404a00190, 0x0000024428002800, 57,  896 },
    { 0x8502004101108210, 0x0002040850005000, 57, 1024 },
    { 0x8002044041042003, 0x0004081020002000, 59, 1152 },
    { 0x0214422031041001, 0x0008102040004000, 59, 1184 },
    { 0x8010400004880200, 0x0008040200020400, 59, 1216 },
    { 0x20042000a4014c02, 0x0010080400040800, 59, 1248 },
    { 0x2019040220880410, 0x0020100a000a1000, 57, 1280 },
    { 0x0404080008220040, 0x0040221400142200, 55, 1408 },
    { 0x0081001281004000, 0x0002442800284400, 55, 1920 },
    { 0x021010800408840e, 0x0004085000500800, 57, 2432 },
    { 0x0824004a04110448, 0x0008102000201000, 59, 2560 },
    { 0xb041002001040100, 0x0010204000402000, 59, 2592 },
    { 0x0230058404109000, 0x0004020002040800, 59, 2624 },
    { 0x1079480288201400, 0x0008040004081000, 59, 2656 },
    { 0x0242a18800102020, 0x00100a000a102000, 57, 2688 },
    { 0x8402080800020a00, 0x0022140014224000, 55, 2816 },
    { 0x02a0008480a40020, 0x0044280028440200, 55, 3328 },
    { 0x08d0100040802404, 0x0008500050080400, 57, 3840 },
    { 0x0104010400204409, 0x0010200020100800, 59, 3968 },
    { 0x080401e180020480, 0x0020400040201000, 59, 4000 },
    { 0x0001101105009000, 0x0002000204081000, 59, 4032 },
    { 0x0040482210140800, 0x0004000408102000, 59, 4064 },
    { 0x00020100c8008910, 0x000a000a10204000, 57, 4096 },
    { 0x0004402018000100, 0x0014001422400000, 57, 4224 },
    { 0x01700c0302140400, 0x0028002844020000, 57, 4352 },
    { 0x00c0100400200040, 0x0050005008040200, 57, 4480 },
    { 0x0002140104040a21, 0x0020002010080400, 59, 4608 },
    { 0x00d0010110210101, 0x0040004020100800, 59, 4640 },
    { 0x004382088240c401, 0x0000020408102000, 59, 4672 },
    { 0x0640820801040000, 0x0000040810204000, 59, 4704 },
    { 0x880c083a01100040, 0x00000a1020400000, 59, 4736 },
    { 0x0040000042022008, 0x0000142240000000, 59, 4768 },
    { 0x201082d122021003, 0x0000284402000000, 59, 4800 },
    { 0x4281102111210002, 0x0000500804020000, 59, 4832 },
    { 0x80180b3000c0a082, 0x0000201008040200, 59, 4864 },
    { 0x0082481801004202, 0x0000402010080400, 59, 4896 },
    { 0x01d0802801046000, 0x0002040810204000, 58, 4928 },
    { 0x2880150100900461, 0x0004081020400000, 59, 4992 },
    { 0x0023030a0a0a0900, 0x000a102040000000, 59, 5024 },
    { 0x0603210001040904, 0x0014224000000000, 59, 5056 },
    { 0x00e044003106060c, 0x0028440200000000, 59, 5088 },
    { 0x0000200508500440, 0x0050080402000000, 59, 5120 },
    { 0x80060521020c0101, 0x0020100804020000, 59, 5152 },
    { 0x0030204084015040, 0x0040201008040200, 58, 5184 }
} };

std::array<Magic, Square::SQUARE_COUNT> RookMagicList = { {
    { 0x0880008010204000, 0x000101010101017e, 52,    0 },
    { 0x0140002000409000, 0x000202020202027c, 53, 4096 },
    { 0x08801000a0028118, 0x000404040404047a, 53, 6144 },
    { 0x7080080004821000, 0x0008080808080876, 53, 8192 },
    { 0x0100021008000500, 0x001010101010106e, 53, 10240 },
    { 0x0b00010024000228, 0x002020202020205e, 53, 12288 },
    { 0x0880210012000080, 0x004040404040403e, 53, 14336 },
    { 0x8200004b02208402, 0x008080808080807e, 52, 16384 },
    { 0x4002800080400020, 0x0001010101017e00, 53, 20480 },
    { 0x8849400020005000, 0x0002020202027c00, 54, 22528 },
    { 0x4406004210802200, 0x0004040404047a00, 54, 23552 },
    { 0x3820040100820040, 0x0008080808087600, 54, 24576 },
    { 0x0121000800110004, 0x0010101010106e00, 54, 25600 },
    { 0x0288808002000400, 0x0020202020205e00, 54, 26624 },
    { 0x0001000200010004, 0x0040404040403e00, 54, 27648 },
    { 0x020200004c220881, 0x0080808080807e00, 53, 28672 },
    { 0x0804208000400c88, 0x00010101017e0100, 53, 30720 },
    { 0x8040108020008042, 0x00020202027c0200, 54, 32768 },
    { 0x4020088010048020, 0x00040404047a0400, 54, 33792 },
    { 0x0002090023001000, 0x0008080808760800, 54, 34816 },
    { 0x0048004004020041, 0x00101010106e1000, 54, 35840 },
    { 0x0288808002000400, 0x00202020205e2000, 54, 36864 },
    { 0x0000040008011002, 0x00404040403e4000, 54, 37888 },
    { 0x04000a00005100a4, 0x00808080807e8000, 53, 38912 },
    { 0x4008800080284000, 0x000101017e010100, 53, 40960 },
    { 0x0080200040100048, 0x000202027c020200, 54, 43008 },
    { 0x0000200480100081, 0x000404047a040400, 54, 44032 },
    { 0x0403002300081001, 0x0008080876080800, 54, 45056 },
    { 0x0102001200082004, 0x001010106e101000, 54, 46080 },
    { 0x1000040080800200, 0x002020205e202000, 54, 47104 },
    { 0xc010880400100182, 0x004040403e404000, 54, 48128 },
    { 0x0060942600018051, 0x008080807e808000, 53, 49152 },
    { 0x10c0008042800428, 0x0001017e01010100, 53, 51200 },
    { 0x0001008021004000, 0x0002027c02020200, 54, 53248 },
    { 0x08900800a0a00400, 0x0004047a04040400, 54, 54272 },
    { 0x0002090023001000, 0x0008087608080800, 54, 55296 },
    { 0x0084040801001100, 0x0010106e10101000, 54, 56320 },
    { 0x0002008802004450, 0x0020205e20202000, 54, 57344 },
    { 0x04800811c4001002, 0x0040403e40404000, 54, 58368 },
    { 0x212000410200088c, 0x0080807e80808000, 53, 59392 },
    { 0x0280002000404008, 0x00017e0101010100, 53, 61440 },
    { 0x0418200050044000, 0x00027c0202020200, 54, 63488 },
    { 0x0118200010008080, 0x00047a0404040400, 54, 64512 },
    { 0x0c00080010008080, 0x0008760808080800, 54, 65536 },
    { 0x0121000800110004, 0x00106e1010101000, 54, 66560 },
    { 0x1009000400030008, 0x00205e2020202000, 54, 67584 },
    { 0x0001000200010004, 0x00403e4040404000, 54, 68608 },
    { 0x000a040088420009, 0x00807e8080808000, 53, 69632 },
    { 0x0484410024920200, 0x007e010101010100, 53, 71680 },
    { 0x0484410024920200, 0x007c020202020200, 54, 73728 },
    { 0xd01000a004080220, 0x007a040404040400, 54, 74752 },
    { 0x0000100020090100, 0x0076080808080800, 54, 75776 },
    { 0x0084040801001100, 0x006e101010101000, 54, 76800 },
    { 0x0212040080020080, 0x005e202020202000, 54, 77824 },
    { 0x0003123021081400, 0x003e404040404000, 54, 78848 },
    { 0x0002800100004080, 0x007e808080808000, 53, 79872 },
    { 0x0000204080041501, 0x7e01010101010100, 52, 81920 },
    { 0x0000120100208042, 0x7c02020202020200, 53, 86016 },
    { 0x0000204010800a02, 0x7a04040404040400, 53, 88064 },
    { 0x2550042009001001, 0x7608080808080800, 53, 90112 },
    { 0x2056000820100402, 0x6e10101010101000, 53, 92160 },
    { 0x4222000408011002, 0x5e20202020202000, 53, 94208 },
    { 0x80aa101082114804, 0x3e40404040404000, 53, 96256 },
    { 0x10000a2109418402, 0x7e80808080808000, 52, 98304 }
} };

template <PieceType pieceType, std::uint32_t attackTableSize>
constexpr void InitializeAttackTable(std::array<Bitboard, attackTableSize>& attackTable) {
    const std::array<Magic, Square::SQUARE_COUNT>& magics = pieceType == PieceType::BISHOP ? BishopMagicList : RookMagicList;

    for (Square src = Square::FIRST_SQUARE; src < Square::SQUARE_COUNT; src++) {
        const Magic& m = magics[src];

        Bitboard allPieces = EmptyBitboard;

        do {
            const std::uint32_t index = m.index(allPieces);
            attackTable[m.attacks + index] = SlidingAttacks<pieceType>(src, allPieces);

            allPieces = (allPieces - m.mask) & m.mask;
        } while (allPieces != EmptyBitboard);
    }
}

std::array<Bitboard, 0x1480> BishopAttackTable
{ []() constexpr {
    std::array<Bitboard, 0x1480> result{};

    InitializeAttackTable<PieceType::BISHOP, 0x1480>(result);

    return result;
}() };

std::array<Bitboard, 0x19000> RookAttackTable
{ []() constexpr {
    std::array<Bitboard, 0x19000> result{};

    InitializeAttackTable<PieceType::ROOK, 0x19000>(result);

    return result;
}() };
